package edu.byui.cit.calc360;

import android.app.Activity;
import android.content.Context;
import android.content.SharedPreferences;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.widget.AdapterView;

import edu.byui.cit.text.ButtonWrapper;
import edu.byui.cit.text.Control;
import edu.byui.cit.text.EditWrapper;
import edu.byui.cit.text.Input;
import edu.byui.cit.text.ItemSelectedListener;


public abstract class CalcFragment extends OmniFragment implements TextWatcher,
		/*OnTouchListener,*/ ItemSelectedListener, OnClickListener {
	private Input[] inputs;
	private Control[] outputs;
	private OrderedIndexArray indicesOfGivens;


	protected void initialize(
			View view, Input[] inputs, Control[] outputs, int btnClearID) {
		this.inputs = inputs;
		this.outputs = outputs;
		indicesOfGivens = new OrderedIndexArray(inputs.length, inputs.length);

		// Add a button click listener to the Clear button.
		new ButtonWrapper(view, btnClearID, new ClearHandler());
	}


	/* progs, nextIsProgrammatic, and replacing onItemSelected with
	 * itemSelected are all necessary because the Android Spinner class
	 * does not distinguish between selection events generated by the
	 * app and those generated by the user. Even removing the
	 * OnItemSelectedListener before programmtically selecting a value,
	 * as we did with TextEdits makes no difference for a Spinner. */
	private long progs = 0;

	@Override
	public final void nextIsProgrammatic() {
		++progs;
	}

	@Override
	public final void onItemSelected(
			AdapterView<?> parent, View view, int pos, long id) {
		if (progs > 0) {
			--progs;
		}
		else {
			itemSelected(parent, view, pos, id);
		}
	}

	public void itemSelected(
			AdapterView<?> parent, View view, int pos, long id) {
		callCompute();
	}

	@Override
	public void onNothingSelected(AdapterView<?> adapterView) {
	}

//	@Override
//	public boolean onTouch(View view, MotionEvent motionEvent) {
//		return false;
//	}


	@Override
	public void beforeTextChanged(
			CharSequence s, int start, int count, int after) {
	}

	@Override
	public void onTextChanged(
			CharSequence s, int start, int before, int count) {
	}

	@Override
	public void afterTextChanged(Editable edit) {
		int index = indexOf(inputs, edit);
		if (edit.toString().isEmpty()) {
			if (indicesOfGivens.contains(index)) {
				indicesOfGivens.remove(index);
				callCompute();
			}
		}
		else {
			indicesOfGivens.add(index);
			callCompute();
		}
	}


	@Override
	public void onClick(View button) {
		callCompute();
	}


	protected void callCompute() {
		try {
			compute();
		}
		catch (NumberFormatException ex) {
			// Do nothing.
		}
		catch (Exception ex) {
			Log.e(Calc360.TAG, "exception", ex);
		}
	}

	protected void compute() {
	}


	public void callCompute(Input input) {
		try {
			int index = indexOf(inputs, input);
			if (input.isEmpty()) {
				if (indicesOfGivens.contains(index)) {
					indicesOfGivens.remove(index);
					callCompute();
				}
			}
			else {
				indicesOfGivens.add(index);
				callCompute();
			}
		}
		catch (NumberFormatException ex) {
			// Do nothing.
		}
		catch (Exception ex) {
			Log.e(Calc360.TAG, "exception", ex);
		}
	}


	protected boolean userInput(Input input) {
		int index = indexOf(inputs, input);
		return indicesOfGivens.contains(index);
	}

	private static int indexOf(Control[] controls, Editable key) {
		int index = -1;
		for (int i = 0;  i < controls.length;  ++i) {
			Control ctrl = controls[i];
			if (ctrl instanceof EditWrapper &&
					((EditWrapper)ctrl).getEdit().getEditableText() == key) {
				index = i;
				break;
			}
		}
		return index;
	}

	private static int indexOf(Control[] controls, Control key) {
		int index = -1;
		for (int i = 0;  i < controls.length;  ++i) {
			if (controls[i] == key) {
				index = i;
				break;
			}
		}
		return index;
	}


	/** Handles a click on the clear button. */
	final class ClearHandler implements OnClickListener {
		@Override
		public void onClick(View button) {
			for (Control ctrl : inputs) {
				ctrl.clear();
			}
			clearOutputs();
			indicesOfGivens.clear();
			Activity act = getActivity();
			SharedPreferences prefs = act.getPreferences(Context.MODE_PRIVATE);
			restorePrefs(prefs);
			inputs[0].requestFocus();
		}
	}

	protected void clearOutputs() {
		for (Control ctrl : outputs) {
			ctrl.clear();
		}
	}
}
